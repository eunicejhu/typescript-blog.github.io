{"version":3,"sources":["helpers/history.js","context/ThemeContext.jsx","test/mock_data.ts","api/client.ts","features/posts/postsSlice.ts","features/users/usersSlice.ts","store/index.ts","NavBar.jsx","features/posts/PostAuthor.tsx","utils/getTimeAgo.ts","features/posts/TimeAgo.tsx","features/posts/ReactionButtons.tsx","features/posts/SinglePostPage.tsx","features/posts/AddPostForm.tsx","features/posts/PostsList.tsx","features/posts/EditPostForm.tsx","Routes.tsx","App.tsx","index.jsx"],"names":["history","createBrowserHistory","themes","ThemeContext","React","createContext","theme","setTheme","displayName","NOW","INITIAL_STATE","posts","status","error","undefined","updatePostError","data","id","title","content","userId","date","sub","parseISO","days","toISOString","reactions","thumbsUp","hooray","heart","rocket","eyes","users","name","Client","res","Promise","resolve","setTimeout","reject","nanoid","Date","fetchPosts","createAsyncThunk","a","fetchPost","addNewPost","updatePost","addReaction","postId","reaction","initialState","postsSlice","createSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","errorMessageForDev","type","console","push","existingPost","find","post","JSON","stringify","UPDATE_POST_ERROR_MSG","fetchUsers","fetch","usersSlice","store","configureStore","reducer","postsReducer","usersReducer","selectAllPosts","selectPostById","NavBar","to","PostAuthor","user","useSelector","className","getTimeAgo","dateStr","Boolean","formatDistanceToNow","TimeAgo","timeAgo","reactionEmoji","ReactionButtons","dispatch","useDispatch","reactionButtons","Object","entries","map","emoji","onClick","SinglePostPage","useRouteMatch","params","AddPostForm","useState","setTitle","setContent","setUserId","addRequestStatus","setAddRequestStatus","addRequestError","setAddRequestError","renderUsersOptions","value","canAdd","every","onAddPostClicked","resultAction","unwrapResult","message","htmlFor","data-testid","width","onChange","e","currentTarget","disabled","PostsList","path","postsStatus","postsError","useEffect","renderedPosts","slice","sort","b","localeCompare","substring","length","EditPostForm","useHistory","cols","rows","preventDefault","NoMatch","Routes","exact","App","Entry","Provider","CookiesProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8729d27.chunk.js","sourcesContent":["import { createBrowserHistory, createMemoryHistory } from \"history\";\n\nconst isTest = process.env.NODE_ENV === \"test\";\nconst history = isTest\n  ? createMemoryHistory({ initialEntries: [\"/initial\"] })\n  : createBrowserHistory();\n\nexport default history;\n","import React from \"react\";\n\nexport const themes = {\n  dark: \"dark\",\n  light: \"light\",\n};\n\nconst ThemeContext = React.createContext({\n  theme: themes.dark,\n  setTheme: () => {},\n});\n\nThemeContext.displayName = \"ThemeContext\";\n\nexport default ThemeContext;\n","import { sub, parseISO } from \"date-fns\";\nimport { State } from \"../store/index\";\n\nexport const NOW = \"2020-11-15T16:16:08.493Z\";\nexport const TIME_AGO = \"28 minutes\";\nexport const EMPTY_STATE: State = {\n  posts: {\n    status: \"succeeded\",\n    error: undefined,\n    data: [],\n    updatePostError: undefined,\n  },\n  users: { data: [], status: \"succeeded\", error: null },\n};\nexport const INITIAL_STATE: State = {\n  posts: {\n    status: \"idle\",\n    error: undefined,\n    updatePostError: undefined,\n    data: [\n      {\n        id: \"1\",\n        title: \"First test Post!\",\n        content: \"test!\",\n        userId: \"1\",\n        date: sub(parseISO(NOW), { days: 1 }).toISOString(),\n        reactions: { thumbsUp: 0, hooray: 0, heart: 4, rocket: 0, eyes: 0 },\n      },\n      {\n        id: \"2\",\n        title: \"Second test Post\",\n        content: \"test\",\n        userId: \"0\",\n        date: sub(parseISO(NOW), { days: 5 }).toISOString(),\n        reactions: { thumbsUp: 3, hooray: 0, heart: 0, rocket: 0, eyes: 0 },\n      },\n    ],\n  },\n  users: {\n    data: [\n      { id: \"0\", name: \"Tianna Jenkins\" },\n      { id: \"1\", name: \"Kevin Grant\" },\n      { id: \"2\", name: \"Madison Price\" },\n    ],\n    status: \"succeeded\",\n    error: null,\n  },\n};\n\nexport default { INITIAL_STATE };\n","import { AxiosResponse } from \"axios\";\nimport { INITIAL_STATE } from \"../test/mock_data\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nclass Client {\n  static async fetchPost<T>(): Promise<AxiosResponse<T>> {\n    /**\n     * TODO: Actual Implementation when server is ready\n     const url = \"fetch_post_url\";\n    const res = await axios.get<T>(url); */\n    const res = new Promise<AxiosResponse<T>>((resolve) => {\n      setTimeout(() => {\n        return resolve({ data: INITIAL_STATE.posts.data } as AxiosResponse);\n      }, 1000);\n    });\n    return res;\n  }\n\n  static async addNewPost<T>(data: T): Promise<AxiosResponse<T>> {\n    let res;\n    /**\n     * TODO: Actual Implementation when server is ready\n     * const url = \"add_new_post_url\";\n     * res = await axios.post(url, {data });\n     */\n\n    res = new Promise<AxiosResponse<T>>((resolve, reject) => {\n      setTimeout(() => {\n        return resolve({\n          data: {\n            ...data,\n            id: nanoid(), // normally, it should be returned from server\n            date: new Date().toISOString(),\n            reactions: { thumbsUp: 0, hooray: 0, heart: 0, rocket: 0, eyes: 0 },\n          },\n        } as AxiosResponse);\n        // return reject(new Error(\"Cannot add new Post\"));\n      }, 1000);\n    });\n\n    return res;\n  }\n\n  static async updatePost<T>(data: T): Promise<AxiosResponse<T>> {\n    let res;\n    /**\n     * TODO: Actual Implementation when server is ready\n     * const url = \"update_post_url\";\n     * res = await axios.post<T>(url, data);\n     * */\n    res = new Promise<AxiosResponse<T>>((resolve) => {\n      setTimeout(() => {\n        return resolve({ data } as AxiosResponse);\n      }, 1000);\n    });\n    return res;\n  }\n\n  static async addReaction<Return>(\n    data: Return\n  ): Promise<AxiosResponse<Return>> {\n    let res;\n    /**\n     * TODO: Actual Implementation when server is ready\n     * const url = \"add_reaction_url\";\n     * res = await axios.post<Return>(url, data);\n     * */\n\n    res = new Promise<AxiosResponse<Return>>((resolve) => {\n      return resolve({ data } as AxiosResponse<Return>);\n    });\n    return res;\n  }\n}\n\nexport default Client;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Client from \"../../api/client\";\nconst UPDATE_POST_ERROR_MSG = \"Failed to update post\";\nconst FETCH_POSTS_ERROR_MSG = \"Failed to fetch posts\";\nexport type PostsState = {\n  data: Post[];\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n  error: string | undefined;\n  updatePostError: string | undefined;\n};\nexport interface Post {\n  id: string;\n  title: string;\n  content: string;\n  userId: string;\n  date: string;\n  reactions: {\n    thumbsUp: number;\n    hooray: number;\n    heart: number;\n    rocket: number;\n    eyes: number;\n  };\n}\n\nexport interface AddNewPostAction {\n  type: string;\n  payload: Post;\n}\n\nexport interface PostUpdatedAction {\n  type: string;\n  payload: Post;\n}\n\nexport interface ReactionAddedAction {\n  type: string;\n  payload: {\n    postId: string;\n    reaction: keyof Post[\"reactions\"];\n  };\n}\n\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  let res;\n  res = await Client.fetchPost<Post[]>();\n  return res;\n});\n\ntype addNewPostThunkArg = { title: string; content: string; userId: string };\nexport const addNewPost = createAsyncThunk(\n  \"posts/addNewPost\",\n  async ({ title, content, userId }: addNewPostThunkArg) => {\n    let res;\n    res = await Client.addNewPost<Post>({\n      title,\n      content,\n      userId,\n    } as Post);\n    return res;\n  }\n);\n\ntype updatePostThunkArg = { id: string; title: string; content: string };\nexport const updatePost = createAsyncThunk(\n  \"posts/updatePost\",\n  async ({ id, title, content }: updatePostThunkArg) => {\n    let res;\n    res = await Client.updatePost<updatePostThunkArg>({\n      id,\n      title,\n      content,\n    });\n    return res;\n  }\n);\n\nexport type addReactionThunkArg = {\n  postId: string;\n  reaction: keyof Post[\"reactions\"];\n};\nexport const addReaction = createAsyncThunk(\n  \"posts/addReaction\",\n  async ({ postId, reaction }: addReactionThunkArg) => {\n    let res;\n    res = await Client.addReaction<addReactionThunkArg>({\n      postId,\n      reaction,\n    });\n    return res;\n  }\n);\nconst initialState: PostsState = {\n  data: [],\n  status: \"idle\",\n  error: undefined,\n  updatePostError: undefined,\n};\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // fetchPost\n    builder.addCase(fetchPosts.pending, (state) => {\n      state.status = \"loading\";\n    });\n    builder.addCase(fetchPosts.fulfilled, (state, action) => {\n      state.data = action.payload.data;\n      state.status = \"succeeded\";\n      state.error = undefined;\n    });\n    builder.addCase(fetchPosts.rejected, (state, action) => {\n      let errorMessageForDev = `${action.type}: Error from REST API (action.error.message)`;\n      console.error(errorMessageForDev);\n      state.error = FETCH_POSTS_ERROR_MSG;\n      state.status = \"failed\";\n      state.data = [];\n    });\n    // addNewPost\n    builder.addCase(addNewPost.fulfilled, (state, action) => {\n      state.data.push(action.payload.data);\n    });\n    // updatePost\n    builder.addCase(updatePost.fulfilled, (state, action) => {\n      let { id, title, content } = action.payload.data;\n      const existingPost = state.data.find((post) => post.id === id);\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      } else {\n        // TODO: log detailed error message for developer\n        let errorMessageForDev = `${\n          action.type\n        }: Error from client: existingPost not found for data from server ${JSON.stringify(\n          action.payload.data\n        )}`;\n        console.error(errorMessageForDev);\n\n        let errorMessageForUser = UPDATE_POST_ERROR_MSG;\n        state.updatePostError = errorMessageForUser;\n      }\n    });\n    builder.addCase(updatePost.rejected, (state, action) => {\n      let errorMessageForDev = `${action.type}: Error from REST API (action.error.message)`;\n      console.error(errorMessageForDev);\n      let errorMessageForUser = UPDATE_POST_ERROR_MSG;\n      state.updatePostError = errorMessageForUser;\n    });\n    // addReaction\n    builder.addCase(addReaction.fulfilled, (state, action) => {\n      const existingPost = state.data.find(\n        (post) => post.id === action.payload.data.postId\n      );\n      if (existingPost) {\n        let reaction = action.payload.data.reaction;\n        existingPost.reactions[reaction] += 1;\n      } else {\n        let errorMessageForDev = `${\n          action.type\n        }: Error from client: existingPost not found for data from server ${JSON.stringify(\n          action.payload.data\n        )}`;\n        console.error(errorMessageForDev);\n      }\n    });\n    builder.addCase(addReaction.rejected, (state, action) => {\n      let errorMessageForDev = `${action.type}: Error from REST API (action.error.message)`;\n      console.error(errorMessageForDev);\n    });\n  },\n});\n\nexport default postsSlice.reducer;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { INITIAL_STATE } from \"../../test/mock_data\";\n\nexport interface User {\n  id: string;\n  name: string;\n}\n\nexport interface UsersState {\n  data: User[];\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n  error: string | null;\n}\n\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  let res;\n  /**\n   * TODO: axios\n   */\n  const fetch = new Promise<User[]>((resolve) => {\n    setTimeout(() => {\n      return resolve(INITIAL_STATE.users.data);\n    }, 1000);\n  });\n  res = await fetch;\n  return res;\n});\n\nconst initialState: UsersState = {\n  data: [],\n  status: \"idle\",\n  error: null,\n};\n\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [(fetchUsers.fulfilled as unknown) as string]: (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.data = action.payload;\n    },\n  },\n});\n\nexport default usersSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport postsReducer, { Post } from \"../features/posts/postsSlice\";\nimport usersReducer from \"../features/users/usersSlice\";\nimport { useDispatch } from \"react-redux\";\n\nconst store = configureStore({\n  reducer: { posts: postsReducer, users: usersReducer },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport type State = ReturnType<typeof store.getState>;\n// selectors\nexport const selectAllPosts = (state: State): Post[] => state.posts.data;\nexport const selectPostById = (\n  state: State,\n  postId: string\n): Post | undefined => state.posts.data.find((post) => post.id === postId);\n\nexport default store;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => (\n  <nav>\n    <li>\n      <Link to=\"/\">Home</Link>\n    </li>\n  </nav>\n);\n\nexport default NavBar;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { State } from \"../../store\";\n\nconst PostAuthor: React.FC<{ userId: string }> = ({ userId }) => {\n  const user = useSelector((state: State) =>\n    state.users.data.find((user) => user.id === userId)\n  );\n  return (\n    <span className=\"post-author\">\n      By {user ? user.name : \"Unknown author\"}\n    </span>\n  );\n};\nexport default PostAuthor;\n","import { parseISO, formatDistanceToNow } from \"date-fns\";\nconst getTimeAgo = (dateStr: string): string => {\n  if (Boolean(dateStr)) {\n    return formatDistanceToNow(parseISO(dateStr));\n  }\n  return \"\";\n};\n\nexport default getTimeAgo;\n","import React from \"react\";\nimport getTimeAgo from \"../../utils/getTimeAgo\";\n\nconst TimeAgo: React.FC<{ date: string }> = ({ date }) => {\n  let timeAgo = getTimeAgo(date);\n  if (Boolean(timeAgo)) {\n    timeAgo += \" ago\";\n  }\n  return (\n    <span className=\"date\">\n      {\" \"}\n      <i>{timeAgo}</i>{\" \"}\n    </span>\n  );\n};\nexport default TimeAgo;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Post, addReaction } from \"./postsSlice\";\n\nconst reactionEmoji = {\n  thumbsUp: \"👍\",\n  hooray: \"🎉\",\n  heart: \"❤️\",\n  rocket: \"🚀\",\n  eyes: \"👀\",\n};\n\ntype Props = { post: Post };\ntype Name = keyof Props[\"post\"][\"reactions\"];\nconst ReactionButtons: React.FC<Props> = ({\n  post: { reactions, id },\n}: Props) => {\n  const dispatch = useDispatch();\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => (\n    <button\n      key={name}\n      type=\"button\"\n      name={name}\n      onClick={() =>\n        dispatch(addReaction({ postId: id, reaction: name as Name }))\n      }\n    >\n      {emoji} {reactions[name as Name]}\n    </button>\n  ));\n  return <div className=\"reactions-container\">{reactionButtons}</div>;\n};\n\nexport default ReactionButtons;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n// eslint-disable-next-line\nimport { useRouteMatch, match, Link } from \"react-router-dom\";\nimport { State, selectPostById } from \"../../store\";\nimport { Post } from \"./postsSlice\";\nimport PostAuthor from \"./PostAuthor\";\nimport TimeAgo from \"./TimeAgo\";\nimport ReactionButtons from \"./ReactionButtons\";\n\ninterface MatchParams {\n  id: string;\n}\n\nconst SinglePostPage = () => {\n  const match: match<MatchParams> = useRouteMatch();\n  const {\n    params: { id: postId },\n  } = match;\n  const post = useSelector<State, Post | undefined>((state) =>\n    selectPostById(state, postId)\n  );\n  if (!post) {\n    return <div>No post found</div>;\n  }\n\n  return (\n    <section className=\"post\">\n      <article>\n        <h3>{post.title}</h3>\n        <p>{post.content}</p>\n        <PostAuthor userId={post.userId} />\n        <TimeAgo date={post.date} />\n        <p>\n          <Link to={`/editPost/${postId}`}>Edit</Link>\n        </p>\n\n        <ReactionButtons post={post} />\n      </article>\n    </section>\n  );\n};\n\nexport default SinglePostPage;\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { addNewPost } from \"./postsSlice\";\nimport { State, useAppDispatch } from \"../../store\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nconst AddPostForm: React.FC = () => {\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [userId, setUserId] = useState(\"\");\n  const [addRequestStatus, setAddRequestStatus] = useState(\"idle\");\n  const [addRequestError, setAddRequestError] = useState(undefined);\n\n  const dispatch = useAppDispatch();\n\n  const users = useSelector((state: State) => state.users.data);\n\n  const renderUsersOptions =\n    users &&\n    users.map((user) => (\n      <option key={user.id} value={user.id}>\n        {user.name}\n      </option>\n    ));\n  const onTitleChanged = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n  const onContentChanged = (e: React.SyntheticEvent<HTMLTextAreaElement>) => {\n    setContent(e.currentTarget.value);\n  };\n  const onUserChanged = (e: React.SyntheticEvent<HTMLSelectElement>) => {\n    setUserId(e.currentTarget.value);\n  };\n\n  const canAdd =\n    [title, content, userId].every(Boolean) && addRequestStatus === \"idle\";\n\n  const onAddPostClicked = async () => {\n    if (canAdd) {\n      try {\n        setAddRequestStatus(\"pending\");\n        const resultAction = await dispatch(\n          addNewPost({ title, content, userId })\n        );\n        unwrapResult(resultAction);\n        setTitle(\"\");\n        setContent(\"\");\n        setUserId(\"\");\n      } catch (error) {\n        setAddRequestError(error.message);\n        setTimeout(() => {\n          setAddRequestError(undefined);\n        }, 1000);\n        console.error(\"Failed to save the post: \", error.message);\n      } finally {\n        setAddRequestStatus(\"idle\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"add-post\">\n      <form>\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title</label>\n          <input\n            id=\"title\"\n            data-testid=\"title\"\n            name=\"title\"\n            width={20}\n            value={title}\n            onChange={onTitleChanged}\n          />\n        </div>\n        <div className=\"field\">\n          <label htmlFor=\"content\">Content</label>\n          <textarea\n            id=\"content\"\n            data-testid=\"content\"\n            name=\"content\"\n            value={content}\n            onChange={onContentChanged}\n          ></textarea>\n        </div>\n        <div className=\"field\">\n          <label htmlFor=\"users\">Author</label>\n          <select\n            data-testid=\"users\"\n            value={userId}\n            name=\"users\"\n            id=\"users\"\n            onChange={onUserChanged}\n          >\n            <option value=\"\"></option>\n            {renderUsersOptions}\n          </select>\n        </div>\n        <div className=\"field\">\n          <button type=\"button\" onClick={onAddPostClicked} disabled={!canAdd}>\n            Add Post\n          </button>{\" \"}\n          <span>{addRequestError}</span>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AddPostForm;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useRouteMatch, Link } from \"react-router-dom\";\nimport AddPostForm from \"./AddPostForm\";\nimport { selectAllPosts, State } from \"../../store\";\nimport PostAuthor from \"./PostAuthor\";\nimport TimeAgo from \"./TimeAgo\";\nimport ReactionButtons from \"./ReactionButtons\";\nimport { fetchPosts } from \"./postsSlice\";\n\nconst PostsList = () => {\n  const { path } = useRouteMatch();\n  const dispatch = useDispatch();\n  const postsStatus = useSelector((state: State) => state.posts.status);\n  const postsError = useSelector((state: State) => state.posts.error);\n\n  let content;\n\n  useEffect(() => {\n    if (postsStatus === \"idle\") dispatch(fetchPosts());\n  }, [dispatch, postsStatus]);\n\n  const posts = useSelector(selectAllPosts);\n  const sortedPosts = posts\n    .slice()\n    .sort((a, b) => b.date.localeCompare(a.date));\n  const renderedPosts = sortedPosts.map((post) => (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>{post.title}</h3>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n      <PostAuthor userId={post.userId} />\n      <TimeAgo date={post.date} />\n      <p>\n        <Link to={`${path}posts/${post.id}`}>See more</Link>\n      </p>\n      <ReactionButtons post={post} />\n    </article>\n  ));\n\n  if (postsStatus === \"loading\") {\n    content = <div>loading...</div>;\n  } else if (postsStatus === \"succeeded\") {\n    if (posts.length) {\n      content = renderedPosts;\n    } else {\n      content = <div>No post</div>;\n    }\n  } else if (postsError) {\n    content = <div>{postsError}</div>;\n  }\n  return (\n    <>\n      <section className=\"add-post-form\">\n        <AddPostForm />\n      </section>\n      <section className=\"posts-list\">\n        <h2>Posts</h2>\n        {content}\n      </section>\n    </>\n  );\n};\n\nexport default PostsList;\n","import React, { useState } from \"react\";\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectPostById, State } from \"../../store\";\nimport { updatePost, Post } from \"./postsSlice\";\n\ninterface Params {\n  id: string;\n}\nconst EditPostForm: React.FC = () => {\n  const {\n    params: { id },\n  } = useRouteMatch<Params>();\n  const existingPost = useSelector<State, Post | undefined>((state) =>\n    selectPostById(state, id)\n  );\n  const [title, setTitle] = useState(existingPost?.title);\n  const [content, setContent] = useState(existingPost?.content);\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const onTitleChanged = (e: React.FormEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n  const onContentChanged = (e: React.FormEvent<HTMLTextAreaElement>) => {\n    setContent(e.currentTarget.value);\n  };\n\n  const onSavePostClicked = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    if (content && title) {\n      dispatch(updatePost({ ...existingPost, title, content } as Post));\n      history.push(\"/\");\n    }\n  };\n  if (!existingPost) {\n    return <div>No post found</div>;\n  }\n  return (\n    <form>\n      <h2>Edit Post</h2>\n      <div className=\"field\">\n        <label htmlFor=\"title\">Title</label>\n        <input\n          id=\"title\"\n          name=\"title\"\n          type=\"text\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n      </div>\n      <div className=\"field\">\n        <label htmlFor=\"content\">Content</label>\n        <textarea\n          name=\"content\"\n          id=\"content\"\n          cols={30}\n          rows={10}\n          value={content}\n          onChange={onContentChanged}\n        ></textarea>\n      </div>\n      <div className=\"field\">\n        <button value=\"Submit\" onClick={onSavePostClicked}>\n          Submit\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default EditPostForm;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport SinglePostPage from \"./features/posts/SinglePostPage\";\nimport PostsList from \"./features/posts/PostsList\";\nimport EditPostForm from \"./features/posts/EditPostForm\";\n\nconst NoMatch = () => <>No match</>;\nconst Routes = () => (\n  <Switch>\n    <Route exact path=\"/\">\n      <PostsList />\n    </Route>\n    <Route exact path=\"/posts/:id\">\n      <SinglePostPage />\n    </Route>\n    <Route exact path=\"/editPost/:id\">\n      <EditPostForm />\n    </Route>\n    <Route>\n      <NoMatch />\n    </Route>\n  </Switch>\n);\nexport default Routes;\n","import React, { useEffect } from \"react\";\nimport NavBar from \"./NavBar\";\nimport Routes from \"./Routes\";\n\nimport { useDispatch } from \"react-redux\";\nimport { fetchUsers } from \"./features/users/usersSlice\";\n\nimport \"./App.scss\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, [dispatch]);\n  return (\n    <>\n      <header>\n        <NavBar />\n      </header>\n      <main>\n        <Routes />\n      </main>\n      <footer>copyright@2020 author ZUOQIN HU</footer>\n    </>\n  );\n};\nexport default App;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { CookiesProvider } from \"react-cookie\";\nimport history from \"./helpers/history\";\nimport ThemeContext, { themes } from \"./context/ThemeContext\";\nimport store from \"./store/index.ts\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst Entry = () => {\n  const [theme, setTheme] = useState(themes.dark);\n  return (\n    <Provider store={store}>\n      <ThemeContext.Provider value={{ theme, setTheme }}>\n        <CookiesProvider>\n          <Router history={history}>\n            <App />\n          </Router>\n        </CookiesProvider>\n      </ThemeContext.Provider>\n    </Provider>\n  );\n};\n\nReactDOM.render(<Entry />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}