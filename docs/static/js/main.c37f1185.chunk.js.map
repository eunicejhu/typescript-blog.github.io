{"version":3,"sources":["context/ThemeContext.tsx","api/client.ts","features/posts/postsSlice.ts","features/users/usersSlice.ts","store/selectors.ts","features/notifications/notificationsSlice.ts","store/index.ts","NavBar.tsx","features/posts/PostAuthor.tsx","utils/getTimeAgo.ts","features/posts/TimeAgo.tsx","features/posts/ReactionButtons.tsx","features/posts/SinglePostPage.tsx","hooks/useTheme.ts","components/buttons/Button.tsx","components/select/Select.tsx","components/form/StyledForm.tsx","features/posts/AddPostForm.tsx","features/posts/PostsList.tsx","features/posts/EditPostForm.tsx","features/notifications/NotificationsList.tsx","Routes.tsx","App.tsx","index.tsx"],"names":["OTHER","borderRadius","transition","spacing","width","themes","dark","text","background","btnBackground","btnBorder","btnTextHover","btnBackgroundHover","disabled","disabledBackground","light","pink","ThemeContext","React","createContext","mode","setMode","displayName","posts_endpoint","Client","data","axios","post","res","put","get","posts","timestamp","reqConfig","params","notifications","users","fetchPosts","createAsyncThunk","a","fetchPost","addNewPost","title","content","userId","updatePost","id","addReaction","postId","reaction","getState","reactions","find","updatedReactions","Error","initialState","status","error","undefined","updatePostError","reducer","createSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","errorMessageForDev","type","message","console","push","rest","existingPost","Object","entries","forEach","attr","value","JSON","stringify","UPDATE_POST_ERROR_MSG","fetchUsers","selectAllPosts","selectPostById","selectAllNotifications","selectAllUsers","fetchAll","_","latestTimestamp","slice","pop","date","fetchAllNotifications","store","configureStore","postsReducer","usersReducer","notificationsReducer","useAppDispatch","useDispatch","NavBar","to","PostAuthor","user","useSelector","className","getTimeAgo","dateStr","Boolean","formatDistanceToNow","parseISO","TimeAgo","timeAgo","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","dispatch","reactionButtons","map","emoji","data-testid","onClick","SinglePostPage","useRouteMatch","useTheme","useContext","StyledButton","styled","button","Button","children","props","StyledSelect","div","restProps","Select","placeholder","onChange","useState","focus","setFocus","cb","outsideClickHandler","useCallback","e","indexOf","target","classList","useEffect","document","addEventListener","removeEventListener","useClickOutside","bind","onLiClicked","dataset","datalist","item","data-id","data-name","onFocus","defaultValue","Form","form","StyledForm","AddPostForm","setTitle","setContent","setUserId","addRequestStatus","setAddRequestStatus","addRequestError","setAddRequestError","userName","useMemo","canAdd","every","onAddPostClicked","resultAction","unwrapResult","setTimeout","htmlFor","currentTarget","variant","PostsList","path","postsStatus","postsError","renderedPosts","sort","b","localeCompare","substring","length","EditPostForm","history","useHistory","cols","rows","preventDefault","NotificationsList","isLoading","setIsLoading","fetchData","renderedNotifications","notification","author","NoMatch","Routes","exact","StyledApp","App","Entry","Provider","CookiesProvider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c37f1185.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const LIGHT = {\n    text: \"rgba(0, 0, 0, 1)\",\n    background: \"rgba(255, 255, 255, 1)\",\n    btnBackground: \"transparent\",\n    btnBorder: \"rgba(0, 0, 0, 1)\",\n    btnTextHover: \"rgba(255, 255, 255, 0.8)\",\n    btnBackgroundHover: \"rgba(0, 0, 0, 0.8)\",\n    disabled: \"rgba(0, 0, 0, 0.24)\",\n    disabledBackground: \"rgba(255, 255, 255, 0.2)\",\n};\nexport const DARK = {\n    text: \"rgba(255, 255, 255, 1)\",\n    background: \"rgba(0, 0, 0, 1)\",\n    btnBackground: \"transparent\",\n    btnBorder: \"rgba(255, 255, 255, 1)\",\n    btnTextHover: \"rgba(0, 0, 0, 0.8)\",\n    btnBackgroundHover: \"rgba(255, 255, 255, 0.8)\",\n    disabled: \"rgba(255, 255, 255, 0.4)\",\n    disabledBackground: \"rgba(0, 0, 0, 0.2)\",\n};\n\nconst PINK = {\n    text: \"rgba(196, 139, 159, 1)\",\n    background: \"rgba(255, 255, 255, 1)\",\n    btnBackground: \"transparent\",\n    btnBorder: \"rgba(196, 139, 159, 1)\",\n    btnTextHover: \"rgba(255, 255, 255, 0.8)\",\n    btnBackgroundHover: \"rgba(196, 139, 159, 0.8)\",\n    disabled: \"rgba(196, 139, 159, 0.4)\",\n    disabledBackground: \"rgba(196, 139, 159, 0.2)\",\n};\n\nconst OTHER = {\n    borderRadius: \"4px\",\n    transition: \"all 0.2s\",\n    spacing: \"10px\",\n    width: \"100%\",\n};\n\nexport const themes = {\n    dark: { ...DARK, ...OTHER },\n    light: { ...LIGHT, ...OTHER },\n    pink: { ...PINK, ...OTHER },\n};\n\nexport type Mode = \"pink\" | \"dark\" | \"light\";\nexport type Themes = typeof themes;\nexport type SetMode = (mode: Mode) => void;\n\nconst ThemeContext = React.createContext<{\n    mode: Mode;\n    themes: Themes;\n    setMode: SetMode;\n}>({\n    mode: \"pink\",\n    themes: themes,\n    setMode: () => {},\n});\n\nThemeContext.displayName = \"ThemeContext\";\n\nexport default ThemeContext;\n","import axios from \"axios\";\nexport const get_users_url = \"/api/users\";\nexport const get_notifications_url = \"/api/notifications\";\nexport const posts_endpoint = \"/api/posts\";\n\nclass Client {\n  static async addNewPost<T>(data: Partial<T>): Promise<{ data: T }> {\n    let res;\n    res = await axios.post<{ post: T }>(posts_endpoint, { data });\n    return { data: res.data.post };\n  }\n\n  static async updatePost<T>(data: Partial<T>): Promise<{ data: T }> {\n    let res;\n    res = await axios.put<{ post: T }>(posts_endpoint, { data });\n    return { data: res.data.post };\n  }\n\n  static async addReaction<T>(data: Partial<T>): Promise<{ data: T }> {\n    let res;\n    res = await axios.post<{ post: T }>(posts_endpoint, { data });\n    return { data: res.data.post };\n  }\n  static async fetchPost<T>() {\n    const res = await axios.get<{ posts: T }>(posts_endpoint);\n    return { data: res.data.posts };\n  }\n\n  static async fetchAllNotifications<T>(timestamp: string | undefined) {\n    let res;\n    const reqConfig = { params: { timestamp } };\n    res = await axios.get<{ notifications: T }>(\n      get_notifications_url,\n      reqConfig\n    );\n    return { data: res.data.notifications };\n  }\n\n  static async fetchUsers<T>() {\n    let res;\n    res = await axios.get<{ users: T }>(get_users_url);\n    return { data: res.data.users };\n  }\n}\n\nexport default Client;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Client from \"../../api/client\";\nimport { State } from \"../../store/index\";\nconst UPDATE_POST_ERROR_MSG = \"Failed to update post\";\nexport const FETCH_POSTS_ERROR_MSG = \"Failed to fetch posts\";\nexport type PostsState = {\n  data: Post[];\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n  error: string | undefined;\n  updatePostError: string | undefined;\n};\nexport interface Post {\n  id: string;\n  title: string;\n  content: string;\n  userId: string;\n  date: string;\n  reactions: {\n    thumbsUp: number;\n    hooray: number;\n    heart: number;\n    rocket: number;\n    eyes: number;\n  };\n}\n\nexport interface AddNewPostAction {\n  type: string;\n  payload: Post;\n}\n\nexport interface PostUpdatedAction {\n  type: string;\n  payload: Post;\n}\n\nexport interface ReactionAddedAction {\n  type: string;\n  payload: {\n    postId: string;\n    reaction: keyof Post[\"reactions\"];\n  };\n}\n\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  let res;\n  res = await Client.fetchPost<Post[]>();\n  return res;\n});\n\ntype addNewPostThunkArg = { title: string; content: string; userId: string };\nexport const addNewPost = createAsyncThunk(\n  \"posts/addNewPost\",\n  async ({ title, content, userId }: addNewPostThunkArg) => {\n    let res;\n    res = await Client.addNewPost<Post>({\n      title,\n      content,\n      userId,\n    });\n    return res;\n  }\n);\n\ntype updatePostThunkArg = { id: string; title: string; content: string };\nexport const updatePost = createAsyncThunk(\n  \"posts/updatePost\",\n  async ({ id, title, content }: updatePostThunkArg) => {\n    let res;\n    res = await Client.updatePost<Post>({\n      id,\n      title,\n      content,\n    });\n    return res;\n  }\n);\n\nexport type addReactionThunkArg = {\n  postId: string;\n  reaction: keyof Post[\"reactions\"];\n};\nexport const addReaction = createAsyncThunk(\n  \"posts/addReaction\",\n  async ({ postId, reaction }: addReactionThunkArg, { getState }) => {\n    let res;\n    const reactions = (getState() as State).posts.data.find(\n      (post) => post.id === postId\n    )?.reactions;\n    if (reactions) {\n      const updatedReactions: Post[\"reactions\"] = {\n        ...reactions,\n        [reaction]: reactions[reaction] + 1,\n      };\n      res = await Client.addReaction<Post>({\n        id: postId,\n        reactions: updatedReactions,\n      });\n      return res;\n    } else {\n      throw Error(\n        `posts/addReaction: post (id: ${postId}) does not exist in store. BEFORE Rest API call `\n      );\n    }\n  }\n);\nconst initialState: PostsState = {\n  data: [],\n  status: \"idle\",\n  error: undefined,\n  updatePostError: undefined,\n};\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // fetchPost\n    builder.addCase(fetchPosts.pending, (state) => {\n      state.status = \"loading\";\n    });\n    builder.addCase(fetchPosts.fulfilled, (state, action) => {\n      state.data = action.payload.data;\n      state.status = \"succeeded\";\n      state.error = undefined;\n    });\n    builder.addCase(fetchPosts.rejected, (state, action) => {\n      let errorMessageForDev = `${action.type}: Error from REST API (${action.error.message})`;\n      console.error(errorMessageForDev);\n      state.error = FETCH_POSTS_ERROR_MSG;\n      state.status = \"failed\";\n      state.data = [];\n    });\n    // addNewPost\n    builder.addCase(addNewPost.fulfilled, (state, action) => {\n      state.data.push(action.payload.data);\n    });\n    // updatePost\n    builder.addCase(updatePost.fulfilled, (state, action) => {\n      let { id, ...rest } = action.payload.data;\n      const existingPost = state.data.find((post) => post.id === id);\n      if (existingPost) {\n        Object.entries(rest).forEach(([attr, value]) => {\n          (existingPost as Post)[attr as keyof Post] = value;\n        });\n      } else {\n        // TODO: log detailed error message for developer\n        let errorMessageForDev = `${\n          action.type\n        }: Error from client: existingPost not found for data from server ${JSON.stringify(\n          action.payload\n        )}`;\n        console.error(errorMessageForDev);\n\n        let errorMessageForUser = UPDATE_POST_ERROR_MSG;\n        state.updatePostError = errorMessageForUser;\n      }\n    });\n    builder.addCase(updatePost.rejected, (state, action) => {\n      let errorMessageForDev = `${action.type}: Error from REST API ${action.error.message}`;\n      console.error(errorMessageForDev);\n      let errorMessageForUser = UPDATE_POST_ERROR_MSG;\n      state.updatePostError = errorMessageForUser;\n    });\n    // addReaction\n    builder.addCase(addReaction.fulfilled, (state, action) => {\n      const { id, ...rest } = action.payload.data;\n      const existingPost = state.data.find((post) => post.id === id);\n      if (existingPost) {\n        Object.entries(rest).forEach(([attr, value]) => {\n          (existingPost as Post)[attr as keyof Post] = value;\n        });\n      } else {\n        let errorMessageForDev = `${\n          action.type\n        }: Error from client: existingPost not found for data from server ${JSON.stringify(\n          action.payload.data\n        )}. AFTER REST api call`;\n        console.error(errorMessageForDev);\n      }\n    });\n    builder.addCase(addReaction.rejected, (state, action) => {\n      let errorMessageForDev = `${action.type}: Error from REST API ${action.error.message}`;\n      console.error(errorMessageForDev);\n    });\n  },\n});\n\nconst { reducer } = postsSlice;\n\nexport default reducer;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Client from \"../../api/client\";\n\nexport interface User {\n  id: string;\n  name: string;\n}\n\nexport interface UsersState {\n  data: User[];\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n  error: string | null;\n}\n\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  let res;\n  res = await Client.fetchUsers<User[]>();\n  return res;\n});\n\nconst initialState: UsersState = {\n  data: [],\n  status: \"idle\",\n  error: null,\n};\n\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchUsers.fulfilled, (state, action) => {\n      state.data = action.payload.data;\n    });\n  },\n});\n\nconst { reducer } = usersSlice;\n\nexport default reducer;\n","// selectors\nimport { State } from \"./index\";\nimport { Notification } from \"../features/notifications/notificationsSlice\";\nimport { Post } from \"../features/posts/postsSlice\";\nimport { User } from \"../features/users/usersSlice\";\n\nexport const selectAllPosts = (state: State): Post[] => state.posts.data;\nexport const selectPostById = (\n  state: State,\n  postId: string\n): Post | undefined => state.posts.data.find((post) => post.id === postId);\nexport const selectAllNotifications = (state: State): Notification[] =>\n  state.notifications;\nexport const selectAllUsers = (state: State): User[] => state.users.data;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { selectAllNotifications } from \"../../store/selectors\";\nimport { State } from \"../../store/types\";\nimport Client from \"../../api/client\";\n\nexport interface Notification {\n  id: string;\n  date: string; // timestamp, ISO string\n  userId: string;\n  message: string;\n}\n\nexport type NotificationsState = Notification[];\n\nexport const fetchAll = createAsyncThunk(\n  \"notifications/fetchAll\",\n  async (_, { getState }) => {\n    const notifications = selectAllNotifications(getState() as State);\n    const latestTimestamp = notifications.slice().pop()?.date;\n    let res;\n    res = await Client.fetchAllNotifications<Notification[]>(latestTimestamp);\n    return res;\n  }\n);\nconst notificationsSlice = createSlice({\n  name: \"notifications\",\n  initialState: [] as NotificationsState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchAll.fulfilled, (state, action) => {\n      return action.payload.data;\n    });\n  },\n});\n\nconst { reducer } = notificationsSlice;\n\nexport default reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport postsReducer from \"../features/posts/postsSlice\";\nimport usersReducer from \"../features/users/usersSlice\";\nimport notificationsReducer from \"../features/notifications/notificationsSlice\";\nimport { useDispatch } from \"react-redux\";\n\nconst store = configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer,\n    notifications: notificationsReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport type State = ReturnType<typeof store.getState>;\n\nexport default store;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => (\n  <nav>\n    <li>\n      <Link to=\"/\">Home</Link>\n    </li>\n    <li>\n      <Link to=\"/notifications\">Notifications</Link>\n    </li>\n  </nav>\n);\n\nexport default NavBar;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { State } from \"../../store\";\n\nconst PostAuthor: React.FC<{ userId: string }> = ({ userId }) => {\n  const user = useSelector((state: State) =>\n    state.users.data.find((user) => user.id === userId)\n  );\n  return (\n    <span className=\"post-author\">\n      By {user ? user.name : \"Unknown author\"}\n    </span>\n  );\n};\nexport default PostAuthor;\n","import { parseISO, formatDistanceToNow } from \"date-fns\";\nconst getTimeAgo = (dateStr: string): string => {\n  if (Boolean(dateStr)) {\n    return formatDistanceToNow(parseISO(dateStr));\n  }\n  return \"\";\n};\n\nexport default getTimeAgo;\n","import React from \"react\";\nimport getTimeAgo from \"../../utils/getTimeAgo\";\n\nconst TimeAgo: React.FC<{ date: string }> = ({ date }) => {\n  let timeAgo = getTimeAgo(date);\n  if (Boolean(timeAgo)) {\n    timeAgo += \" ago\";\n  }\n  return (\n    <span className=\"date\">\n      {\" \"}\n      <i>{timeAgo}</i>{\" \"}\n    </span>\n  );\n};\nexport default TimeAgo;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Post, addReaction } from \"./postsSlice\";\n\nconst reactionEmoji = {\n  thumbsUp: \"👍\",\n  hooray: \"🎉\",\n  heart: \"❤️\",\n  rocket: \"🚀\",\n  eyes: \"👀\",\n};\n\ntype Props = { post: Post };\ntype Name = keyof Props[\"post\"][\"reactions\"];\nconst ReactionButtons: React.FC<Props> = ({\n  post: { reactions, id },\n}: Props) => {\n  const dispatch = useDispatch();\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => (\n    <button\n      key={name}\n      type=\"button\"\n      name={name}\n      data-testid={name}\n      onClick={() =>\n        dispatch(addReaction({ postId: id, reaction: name as Name }))\n      }\n    >\n      {emoji} {reactions[name as Name]}\n    </button>\n  ));\n  return <div className=\"reactions-container\">{reactionButtons}</div>;\n};\n\nexport default ReactionButtons;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n// eslint-disable-next-line\nimport { useRouteMatch, match, Link } from \"react-router-dom\";\nimport { selectPostById } from \"../../store/selectors\";\nimport { State } from \"../../store/types\";\nimport PostAuthor from \"./PostAuthor\";\nimport TimeAgo from \"./TimeAgo\";\nimport ReactionButtons from \"./ReactionButtons\";\n\ninterface MatchParams {\n  id: string;\n}\n\nconst SinglePostPage = () => {\n  const match: match<MatchParams> = useRouteMatch();\n  const {\n    params: { id: postId },\n  } = match;\n  const post = useSelector((state: State) => selectPostById(state, postId));\n  if (!post) {\n    return <div>No post found</div>;\n  }\n\n  return (\n    <section className=\"post\">\n      <article>\n        <h3>{post.title}</h3>\n        <p>{post.content}</p>\n        <PostAuthor userId={post.userId} />\n        <TimeAgo date={post.date} />\n        <p>\n          <Link to={`/editPost/${postId}`}>Edit</Link>\n        </p>\n\n        <ReactionButtons post={post} />\n      </article>\n    </section>\n  );\n};\n\nexport default SinglePostPage;\n","import { useContext } from \"react\";\nimport ThemeContext from \"../context/ThemeContext\";\n\nexport default function useTheme() {\n    const theme = useContext(ThemeContext);\n    return theme || {};\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Themes, Mode } from \"../../context/ThemeContext\";\n\nconst StyledButton = styled.button<ButtonProps>`\n    ${({ themes, mode }: ButtonProps) => {\n        return `\n            --btn-text-hover:  ${themes[mode].btnTextHover};\n            --btn-bg-hover: ${themes[mode].btnBackgroundHover};\n            --color-disabled: ${themes[mode].disabled} ;\n            --color-disabled-bg: ${themes[mode].disabledBackground} ;\n            --color-bg: ${themes[mode].background} ;\n            --color-text:${themes[mode].text};\n            --color-border: ${themes[mode].btnBorder} ;\n            --border-radius: ${themes[mode].borderRadius};\n            --transition: ${themes[mode].transition};\n            --spacing: ${themes[mode].spacing};\n        `;\n    }}\n    color: var(--color-text);\n    background-color: var(--color-bg);\n    border: 1px solid var(--color-border);\n    border-radius: var(--border-radius);\n    transition: var(--transition);\n    padding: var(--spacing);\n\n    &:hover {\n        color: var(--btn-text-hover);\n        cursor: pointer;\n        background-color: var(--btn-bg-hover);\n        border: 1px solid var(--btn-text-hover);\n    }\n\n    &:disabled {\n        color: var(--color-disabled);\n        cursor: not-allowed;\n        background-color: var(--color-disabled-bg);\n        border: 1px solid var(--color-disabled);\n    }\n`;\n\nexport interface ButtonProps {\n    children?: React.ReactNode;\n    themes: Themes;\n    mode: Mode;\n    [p: string]: any;\n}\n\nconst Button: React.FC<ButtonProps> = ({ children, ...props }) => (\n    <StyledButton {...props}>{children}</StyledButton>\n);\n\nexport default Button;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { Themes, Mode } from \"../../context/ThemeContext\";\nexport interface SelectProps {\n    themes: Themes;\n    mode: Mode;\n    data: { id: string; name: string }[];\n    placeholder: string;\n    width?: string;\n    [p: string]: any;\n}\nconst StyledSelect = styled.div<SelectProps>`\n    ${({ themes, mode, ...restProps }) => {\n        return `\n            &&& {\n                width: ${restProps.width || themes[mode].width};\n                position: relative;\n            }\n            &&& input {\n                padding: ${themes[mode].spacing};\n                border: 1px solid ${themes[mode].btnBorder};\n                border-radius: ${themes[mode].borderRadius};\n                background-color: ${themes[mode].background};\n                width: 100%;\n                box-sizing: border-box;\n                outline: none;\n                color: transparent;\n                text-shadow: 0 0 0 ${themes[mode].text};\n\n                &:hover {\n                    cursor: pointer;\n                }\n            }\n            &&& ul {\n                &.open {\n                    display: block\n                    z-index: 2;\n                    background-color: ${themes[mode].background};\n                }\n                &.close {\n                    display: none;\n                }\n                position: absolute;\n                background-color: ${themes[mode].btnBackground};\n                border:1px solid ${themes[mode].btnBorder};\n                width: 100%;\n                box-sizing: border-box;\n                margin: 0;\n                padding: 0;\n\n                li {\n                    list-style: none;\n                    color: ${themes[mode].btnBorder};\n                    padding: ${themes[mode].spacing};\n                    &:hover {\n                        background-color: ${themes[mode].btnBackgroundHover};\n                        color: ${themes[mode].btnTextHover};\n                        cursor: pointer;\n                    }\n                }\n            }\n        `;\n    }}\n`;\n\nconst useClickOutside = (cb: () => void) => {\n    const outsideClickHandler = useCallback(\n        (e: Event) => {\n            if (\n                [\"selectInput\", \"selectInput-li\"].indexOf(\n                    (e.target as HTMLElement).classList[0]\n                ) === -1\n            )\n                cb();\n        },\n        [cb]\n    );\n\n    useEffect(() => {\n        document.addEventListener(\"click\", outsideClickHandler);\n        return () => {\n            document.removeEventListener(\"click\", outsideClickHandler);\n        };\n    }, [outsideClickHandler]);\n};\n\nconst Select: React.FC<SelectProps> = ({\n    data,\n    placeholder,\n    onChange,\n    value,\n    ...props\n}) => {\n    const [focus, setFocus] = useState<boolean>(false);\n\n    useClickOutside(setFocus.bind(this, false));\n\n    const onSelectFocused = () => {\n        setFocus(true);\n    };\n    const onLiClicked = (e: React.FormEvent) => {\n        const id = (e.target as HTMLLIElement).dataset.id;\n        onChange(id as string);\n        setFocus(false);\n    };\n\n    const datalist = data.map((item) => {\n        return (\n            <li\n                data-testid={item.id}\n                data-id={item.id}\n                data-name={item.name}\n                className=\"selectInput-li\"\n                key={item.id}\n                onClick={onLiClicked}\n            >\n                {item.name}\n            </li>\n        );\n    });\n    return (\n        /** Here we use uncontrolled component, because it's onClick of li\n            charging the change of the value, instead of onChange of input. */\n        <StyledSelect {...props}>\n            <input\n                data-testid=\"selectInput\"\n                className=\"selectInput\"\n                onFocus={onSelectFocused}\n                type=\"text\"\n                defaultValue={value}\n                placeholder={placeholder}\n            ></input>\n            <ul className={focus ? \"open\" : \"close\"}>{datalist}</ul>\n        </StyledSelect>\n    );\n};\n\nexport default Select;\n","import React from \"react\";\nimport styled from \"styled-components\";\nexport interface formProps {\n    [p: string]: unknown;\n}\n\nconst Form = styled.form`\n    & {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n    div.field {\n        display: flex;\n        padding: 10px 0;\n        justify-content: center;\n        align-items: flex-start;\n        width: 100%;\n        label {\n            width: 6em;\n            display: inline-block;\n        }\n        input,\n        textarea,\n        div {\n            width: 80%;\n            border-radius: 4px;\n        }\n        textarea {\n            height: 8em;\n        }\n    }\n`;\nconst StyledForm = (props: formProps) => {\n    return <Form {...props}></Form>;\n};\n\nexport default StyledForm;\n","import React, { useState, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { addNewPost } from \"./postsSlice\";\nimport { State, useAppDispatch } from \"../../store\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport useTheme from \"../../hooks/useTheme\";\nimport Button from \"../../components/buttons/Button\";\nimport Select from \"../../components/select/Select\";\nimport StyledForm from \"../../components/form/StyledForm\";\n\nconst ERROR_MSG_FOR_USER = \"Failed to add new post\";\n\nconst AddPostForm: React.FC = () => {\n    const [title, setTitle] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n    const [userId, setUserId] = useState(\"\");\n    const [addRequestStatus, setAddRequestStatus] = useState(\"idle\");\n    const [addRequestError, setAddRequestError] = useState(\"\");\n\n    const { themes, mode } = useTheme();\n\n    const dispatch = useAppDispatch();\n\n    const users = useSelector((state: State) => state.users.data);\n    const userName = useMemo(\n        () => users.find((user) => user.id === userId)?.name,\n        [users, userId]\n    );\n\n    const onTitleChanged = (e: React.SyntheticEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value);\n    };\n    const onContentChanged = (e: React.SyntheticEvent<HTMLTextAreaElement>) => {\n        setContent(e.currentTarget.value);\n    };\n    const onUserChanged = (value: string) => {\n        setUserId(value);\n    };\n\n    const canAdd =\n        [title, content, userId].every(Boolean) && addRequestStatus === \"idle\";\n\n    const onAddPostClicked = async () => {\n        if (canAdd) {\n            try {\n                setAddRequestStatus(\"pending\");\n                const resultAction = await dispatch(\n                    addNewPost({ title, content, userId })\n                );\n                unwrapResult(resultAction);\n                setTitle(\"\");\n                setContent(\"\");\n                setUserId(\"\");\n            } catch (error) {\n                //Improve: log error for Dev\n                console.error(error.message);\n\n                setAddRequestError(ERROR_MSG_FOR_USER);\n                setTimeout(() => {\n                    setAddRequestError(\"\");\n                }, 1000);\n                console.error(\"Failed to save the post: \", error.message);\n            } finally {\n                setAddRequestStatus(\"idle\");\n            }\n        }\n    };\n\n    return (\n        <StyledForm>\n            <div className=\"field\">\n                <label htmlFor=\"title\">Title</label>\n                <input\n                    id=\"title\"\n                    data-testid=\"title\"\n                    name=\"title\"\n                    value={title}\n                    onChange={onTitleChanged}\n                />\n            </div>\n            <div className=\"field\">\n                <label htmlFor=\"content\">Content</label>\n                <textarea\n                    id=\"content\"\n                    data-testid=\"content\"\n                    name=\"content\"\n                    value={content}\n                    onChange={onContentChanged}\n                ></textarea>\n            </div>\n            <div className=\"field\">\n                <label htmlFor=\"users\">Author</label>\n                <div>\n                    <Select\n                        data-testid=\"users\"\n                        value={userName}\n                        name=\"users\"\n                        id=\"users\"\n                        onChange={onUserChanged}\n                        themes={themes}\n                        mode={mode}\n                        placeholder={\"choose the user\"}\n                        data={users}\n                    ></Select>\n                </div>\n            </div>\n            <div className=\"field\">\n                <Button\n                    themes={themes}\n                    mode={mode}\n                    variant=\"primary\"\n                    type=\"button\"\n                    onClick={onAddPostClicked}\n                    disabled={!canAdd}\n                >\n                    Add Post\n                </Button>\n                <span>{addRequestError}</span>\n            </div>\n        </StyledForm>\n    );\n};\n\nexport default AddPostForm;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useRouteMatch, Link } from \"react-router-dom\";\nimport AddPostForm from \"./AddPostForm\";\nimport { selectAllPosts } from \"../../store/selectors\";\nimport { State } from \"../../store/types\";\nimport PostAuthor from \"./PostAuthor\";\nimport TimeAgo from \"./TimeAgo\";\nimport ReactionButtons from \"./ReactionButtons\";\nimport { fetchPosts } from \"./postsSlice\";\nimport { useAppDispatch } from \"../../store/index\";\n\nconst PostsList = () => {\n  const { path } = useRouteMatch();\n  const dispatch = useAppDispatch();\n  const postsStatus = useSelector((state: State) => state.posts.status);\n  const postsError = useSelector((state: State) => state.posts.error);\n  const posts = useSelector(selectAllPosts);\n\n  let content;\n\n  useEffect(() => {\n    if (postsStatus === \"idle\") dispatch(fetchPosts());\n  }, [dispatch, postsStatus]);\n\n  const sortedPosts = posts\n    .slice()\n    .sort((a, b) => b.date.localeCompare(a.date));\n  const renderedPosts = sortedPosts.map((post) => (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>{post.title}</h3>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n      <PostAuthor userId={post.userId} />\n      <TimeAgo date={post.date} />\n      <p>\n        <Link to={`${path}posts/${post.id}`}>See more</Link>\n      </p>\n      <ReactionButtons post={post} />\n    </article>\n  ));\n\n  if (postsStatus === \"loading\") {\n    content = <div>loading...</div>;\n  } else if (postsStatus === \"succeeded\") {\n    if (posts.length) {\n      content = renderedPosts;\n    } else {\n      content = <div>No post</div>;\n    }\n  } else if (postsError) {\n    content = <div>{postsError}</div>;\n  }\n  return (\n    <>\n      <section className=\"add-post-form\">\n        <AddPostForm />\n      </section>\n      <section className=\"posts-list\">\n        <h2>Posts</h2>\n        {content}\n      </section>\n    </>\n  );\n};\n\nexport default PostsList;\n","import React, { useState, useEffect } from \"react\";\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectPostById } from \"../../store/selectors\";\nimport { updatePost, Post } from \"./postsSlice\";\nimport { State } from \"../../store/index\";\nimport Button from \"../../components/buttons/Button\";\nimport useTheme from \"../../hooks/useTheme\";\nimport StyledForm from \"../../components/form/StyledForm\";\n\ninterface Params {\n    id: string;\n}\nconst EditPostForm: React.FC = () => {\n    const {\n        params: { id },\n    } = useRouteMatch<Params>();\n    const existingPost = useSelector((state: State) =>\n        selectPostById(state, id)\n    );\n    const [title, setTitle] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const { themes, mode } = useTheme();\n\n    useEffect(() => {\n        setTitle(existingPost?.title || \"\");\n        setContent(existingPost?.content || \"\");\n    }, [existingPost?.title, existingPost?.content]);\n\n    const onTitleChanged = (e: React.FormEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value);\n    };\n    const onContentChanged = (e: React.FormEvent<HTMLTextAreaElement>) => {\n        setContent(e.currentTarget.value);\n    };\n\n    const onSavePostClicked = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        if (content && title) {\n            dispatch(updatePost({ ...existingPost, title, content } as Post));\n            history.push(`/posts/${id}`);\n        }\n    };\n\n    let renderContent;\n\n    if (!existingPost) {\n        renderContent = <div>No post found</div>;\n    } else {\n        renderContent = (\n            <StyledForm>\n                <h2>Edit Post</h2>\n                <div className=\"field\">\n                    <label htmlFor=\"title\">Title</label>\n                    <input\n                        id=\"title\"\n                        data-testid=\"title\"\n                        name=\"title\"\n                        type=\"text\"\n                        value={title}\n                        onChange={onTitleChanged}\n                    />\n                </div>\n                <div className=\"field\">\n                    <label htmlFor=\"content\">Content</label>\n                    <textarea\n                        name=\"content\"\n                        id=\"content\"\n                        data-testid=\"content\"\n                        cols={30}\n                        rows={10}\n                        value={content}\n                        onChange={onContentChanged}\n                    ></textarea>\n                </div>\n                <div className=\"field\">\n                    <Button\n                        themes={themes}\n                        mode={mode}\n                        value=\"Submit\"\n                        onClick={onSavePostClicked}\n                    >\n                        Submit\n                    </Button>\n                </div>\n            </StyledForm>\n        );\n    }\n    return renderContent;\n};\n\nexport default EditPostForm;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectAllNotifications, selectAllUsers } from \"../../store/selectors\";\nimport { useAppDispatch } from \"../../store/index\";\nimport { fetchAll } from \"./notificationsSlice\";\nimport TimeAgo from \"../posts/TimeAgo\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nconst NotificationsList: React.FC = () => {\n  const users = useSelector(selectAllUsers);\n  const notifications = useSelector(selectAllNotifications);\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useAppDispatch();\n\n  let content;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const resultAction = await dispatch(fetchAll());\n        unwrapResult(resultAction);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(error.message);\n      }\n    };\n    fetchData();\n  }, [dispatch]);\n  const renderedNotifications = notifications.map((notification) => {\n    const author = users.find((user) => user.id === notification.userId)?.name;\n    return (\n      <article key={notification.id}>\n        <p>\n          <b>{author}</b>: <span>{notification.message}</span>\n        </p>\n        <p>\n          <TimeAgo date={notification.date}></TimeAgo>\n        </p>\n      </article>\n    );\n  });\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  } else {\n    content = renderedNotifications;\n  }\n  return (\n    <div>\n      <h2>Notifications List</h2>\n      {content}\n    </div>\n  );\n};\n\nexport default NotificationsList;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport SinglePostPage from \"./features/posts/SinglePostPage\";\nimport PostsList from \"./features/posts/PostsList\";\nimport EditPostForm from \"./features/posts/EditPostForm\";\nimport NotificationsList from \"./features/notifications/NotificationsList\";\n\nconst NoMatch = () => <>No match</>;\nconst Routes = () => (\n  <Switch>\n    <Route exact path=\"/\">\n      <PostsList />\n    </Route>\n    <Route exact path=\"/posts/:id\">\n      <SinglePostPage />\n    </Route>\n    <Route exact path=\"/editPost/:id\">\n      <EditPostForm />\n    </Route>\n    <Route exact path=\"/notifications/\">\n      <NotificationsList />\n    </Route>\n    <Route>\n      <NoMatch />\n    </Route>\n  </Switch>\n);\nexport default Routes;\n","import React, { useEffect } from \"react\";\nimport NavBar from \"./NavBar\";\nimport Routes from \"./Routes\";\nimport styled from \"styled-components\";\nimport { Mode, Themes, SetMode } from \"./context/ThemeContext\";\nimport Select from \"./components/select/Select\";\n\nimport { useDispatch } from \"react-redux\";\nimport { fetchUsers } from \"./features/users/usersSlice\";\n\nexport interface AppProps {\n    themes: Themes;\n    mode: Mode;\n    setMode: SetMode;\n}\n\nconst StyledApp = styled.div<AppProps>`\n    ${({ themes, mode }) => {\n        return `\n            color: ${themes[mode].text};\n            background-color: ${themes[mode].background};\n      \n        & input, & textarea {\n            border: 1px solid  ${themes[mode].btnBorder};\n            padding:  ${themes[mode].spacing};\n            box-sizing: border-box;\n        }\n\n        & header {\n            display: flex;\n            align-items: center;\n            justify-content: flex-end;\n\n            nav {\n                display: flex;\n                li {\n                    margin: 0 ${themes[mode].spacing};\n                    list-style: none;\n                    &:hover {\n                        cursor: pointer;\n                        color: ${themes[mode].background};\n                        background-color: ${themes[mode].text};\n                    }\n                }\n            }\n\n            .selectWrapper {\n                width: 4em;\n                margin: 0 ${themes[mode].spacing};\n            }\n        }\n        `;\n    }}\n    : var(--color-text);\n`;\n\nconst modeData = (data: string[]) =>\n    data.map((mode: string) => ({ id: mode, name: mode }));\n\nconst App: React.FC<AppProps> = (props) => {\n    const dispatch = useDispatch();\n\n    const { themes, mode, setMode } = props;\n    useEffect(() => {\n        dispatch(fetchUsers());\n    }, [dispatch]);\n    return (\n        <StyledApp {...props} themes={themes} mode={mode}>\n            <header>\n                <NavBar />\n                <div className=\"selectWrapper\">\n                    <Select\n                        themes={themes}\n                        mode={mode}\n                        value={mode}\n                        data={modeData([\"dark\", \"pink\", \"light\"])}\n                        placeholder=\"theme\"\n                        onChange={setMode}\n                    ></Select>\n                </div>\n            </header>\n            <main>\n                <Routes />\n            </main>\n            <footer>copyright@2020 author ZUOQIN HU</footer>\n        </StyledApp>\n    );\n};\n\nexport default App;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { CookiesProvider } from \"react-cookie\";\nimport ThemeContext, { themes, Mode } from \"./context/ThemeContext\";\n\nimport store from \"./store/index\";\n\nimport \"normalize.css\";\nimport \"./index.scss\";\n\nimport App from \"./App\";\n\nimport { makeServer } from \"./server\";\nif (process.env.NODE_ENV === \"development\") {\n    makeServer({ environment: \"development\" });\n}\n\nconst Entry = () => {\n    const [mode, setMode] = useState<Mode>(\"pink\");\n    return (\n        <Provider store={store}>\n            <ThemeContext.Provider value={{ mode, setMode: setMode, themes }}>\n                <CookiesProvider>\n                    <BrowserRouter>\n                        <App mode={mode} themes={themes} setMode={setMode} />\n                    </BrowserRouter>\n                </CookiesProvider>\n            </ThemeContext.Provider>\n        </Provider>\n    );\n};\n\nReactDOM.render(<Entry />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}